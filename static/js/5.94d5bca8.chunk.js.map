{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","Axios"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,MAAQ,uB,yHCgCXC,EA9BD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAI,IAAIC,KAAkBF,EAAMC,YAC5BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,uBACHC,MAAO,CAACC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OALd,UAMEN,EAAGJ,KANL,KAMaI,EAAGH,OANhB,OAAWG,EAAGJ,SASzB,OACI,sBAAKW,UAAWC,IAAQjB,MAAxB,UACI,8CAAiBO,EAAjB,OACA,wCAAU,0CAAaW,OAAOC,WAAWlB,EAAMmB,OAAOC,QAAQ,a,gCCpBpEC,E,kLAGEC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAOF,KAAKtB,MAAMyB,U,+BAGtD,IAAIC,EAAS,cAACC,EAAA,EAAD,IAQb,OAPIL,KAAKtB,MAAM4B,UACXF,EAASJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAAAsB,GAAK,OAChC,cAAC,EAAD,CACI5B,YAAa4B,EAAM5B,YACnBkB,MAAOU,EAAMV,OAFLU,EAAMC,QAMtB,8BACKJ,Q,GAhBIK,aAqCNC,uBAfS,SAAAC,GACpB,MAAM,CACFP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAIA,SAAAU,GACvB,MAAM,CACFZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,QAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.94d5bca8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1KwvH\"};","import React from 'react';\r\nimport classes from './Order.module.css';\r\n\r\nconst Order = (props) => {\r\n    const ingredients = [];\r\n\r\n    for(let ingredientName in props.ingredients){\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName, \r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span key={ig.name}\r\n            style={{textTransform: 'capitalize',\r\n                    display: 'inline-block',\r\n                    margin: '0 8px',\r\n                    border: '1px solid #ccc',\r\n                    padding: '5px'}} >\r\n                {ig.name} ({ig.amount}) </span>;\r\n    });\r\n\r\n    return(\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput} </p>\r\n            <p>Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Order;","import Axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nclass Orders extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n    render(){\r\n        let orders = <Spinner/>;\r\n        if(!this.props.loading){\r\n            orders = this.props.orders.map(order => (\r\n                <Order key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={order.price} />\r\n            ))\r\n        };\r\n        return(\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, Axios));"],"sourceRoot":""}
{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.47f41a96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__yDAHA\",\"Label\":\"Input_Label__2n2d0\",\"InputElement\":\"Input_InputElement__3513A\",\"Invalid\":\"Input_Invalid__3Dijp\",\"ValidationError\":\"Input_ValidationError__3SPtI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__8Ni9S\",\"Input\":\"Auth_Input__1kkH7\"};","import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\n\r\n\r\nclass Auth extends Component{\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: \"Your Email\"\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: \"Password\"\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        \r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        ));\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n        \r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n        }\r\n        \r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Log In</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">Switch To {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\nconst mapStateToProps = state => {\r\n    return{\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )(Auth);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    let validationError = null;\r\n    if(props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n    }\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')}\r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option value={option.value} key={option.value} >\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n    return(\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label} >{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;"],"sourceRoot":""}
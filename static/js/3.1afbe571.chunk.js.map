{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","validationError","ValidationError","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.1afbe571.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__yDAHA\",\"Label\":\"Input_Label__2n2d0\",\"InputElement\":\"Input_InputElement__3513A\",\"Invalid\":\"Input_Invalid__3Dijp\",\"ValidationError\":\"Input_ValidationError__3SPtI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1T0tv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__JTRMx\",\"Input\":\"ContactData_Input__23t59\"};","import classes from './CheckoutSummary.module.css';\r\nimport React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return(\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckoutSummary;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component{\r\n    state = {\r\n        orderForm: {           \r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },            \r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },        \r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },        \r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault(); //To prevent sending a request from input event\r\n        \r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.orderForm ){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        \r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        \r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n        \r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n        return(\r\n            <div className={classes.ContactData} >\r\n                <h4>Enter your contact data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\n\r\nclass Checkout extends Component{\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n    render(){\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings){\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                {purchasedRedirect}\r\n                    <CheckoutSummary ingredients={this.props.ings}\r\n                    checkoutCancelled={this.checkoutCancelledHandler}\r\n                    checkoutContinued={this.checkoutContinuedHandler} />\r\n\r\n                    <Route path={this.props.match.path + '/contact-data'} \r\n                    component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div>\r\n                {summary}                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    let validationError = null;\r\n    if(props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>;\r\n    }\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')}\r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = (\r\n                <select className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option value={option.value} key={option.value} >\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} \r\n            {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n    return(\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label} >{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;"],"sourceRoot":""}